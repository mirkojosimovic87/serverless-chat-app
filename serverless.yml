service:
  name: serverless-chat-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation


provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TABLE_USERS: UsersTable
    TABLE_USERS_GSI: socket
    TABLE_USERS_GSI2: username
    TABLE_MSGS: MessagesTable
    TABLE_MSGS_GSI: recipient
    BUCKET_NAME: serverless-chat-app-storage-bucket


custom:
  documentation:
    api:
      info:
        version: v1.0.2
        title: Serverless Chat App API
        description: Serverless Chat application
    models:
      - name: CreateProfileModel
        contentType: application/json
        schema: ${file(models/CreateProfile.json)}
      - name: CreateMessageModel
        contentType: application/json
        schema: ${file(models/CreateMessage.json)}
      - name: SendMessageModelWebsocket
        contentType: application/json
        schema: ${file(models/SendMessageWebsocket.json)}



functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  WebsocketAuth:
    handler: src/lambda/auth/auth0AuthorizerWebsocket.handler

  # HTTP Functions

  GetProfile:
    handler: src/lambda/http/getProfile.handler
    events:
      - http:
          method: get
          path: profile
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbQuery}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}

  CreateProfile:
    handler: src/lambda/http/createProfile.handler
    events:
      - http:
          method: post
          path: profile
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Start a new chat
            description: Start a new chat
            requestModels:
              'application/json': CreateProfileModel
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbQuery}
      - ${file(serverless-iam-roles.yml):dynamodbPutItem}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}

  CreateMessage:
    handler: src/lambda/http/createMsg.handler
    environment:
      API_ENDPOINT: "l3t0mzaam8.execute-api.us-east-1.amazonaws.com/dev"
    events:
      - http:
          method: post
          path: message
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Start a new chat
            description: Start a new chat
            requestModels:
              'application/json': CreateMessageModel
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):s3GetObject}
      - ${file(serverless-iam-roles.yml):dynamodbQuery}
      - ${file(serverless-iam-roles.yml):dynamodbPutItem}
      - ${file(serverless-iam-roles.yml):dynamodbUpdateItem}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}
      - ${file(serverless-iam-roles.yml):executeApiManageConn}

  GetMessagesInChat:
    handler: src/lambda/http/getMessagesInChat.handler
    events:
      - http:
          method: get
          path: chats/{withId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):s3GetObject}
      - ${file(serverless-iam-roles.yml):dynamodbQuery}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}

  GetMediaUploadUrl:
    handler: src/lambda/http/getMediaUploadUrl.handler
    events:
      - http:
          method: get
          path: media_upload_url/{filename}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):s3PutObject}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}

  # Websocket Functions

  SocketConnect:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
          cors: true
          authorizer:
            name: WebsocketAuth
            identitySource:
              - route.request.querystring.Authorization
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbUpdateItem}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}

  SocketDisconnect:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
          cors: true
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbQuery}
      - ${file(serverless-iam-roles.yml):dynamodbUpdateItem}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}

  SendMessage:
    handler: src/lambda/websocket/sendMessage.handler
    environment:
      API_ENDPOINT: "l3t0mzaam8.execute-api.us-east-1.amazonaws.com/dev"
    events:
      - websocket:
          route: sendMsg
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Send a message
            description: Send a message
            requestModels:
              'application/json': SendMessageWebsocketModel
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):s3GetObject}
      - ${file(serverless-iam-roles.yml):dynamodbQuery}
      - ${file(serverless-iam-roles.yml):dynamodbPutItem}
      - ${file(serverless-iam-roles.yml):dynamodbUpdateItem}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}
      - ${file(serverless-iam-roles.yml):executeApiManageConn}

  SeenMessage:
    handler: src/lambda/websocket/seenMessage.handler
    environment:
      API_ENDPOINT: "l3t0mzaam8.execute-api.us-east-1.amazonaws.com/dev"
    events:
      - websocket:
          route: seenMsg
          cors: true
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbQuery}
      - ${file(serverless-iam-roles.yml):dynamodbUpdateItem}
      - ${file(serverless-iam-roles.yml):xrayPutSegments}


resources:
  Resources:

    #    DynamoDB Tables

    UserDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_USERS}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: socketConnectionId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TABLE_USERS_GSI}
            KeySchema:
              - AttributeName: socketConnectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.TABLE_USERS_GSI2}
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL


    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_MSGS}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: msgId
            AttributeType: S
          - AttributeName: chatName
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: msgId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TABLE_MSGS_GSI}
            KeySchema:
              - AttributeName: chatName
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # S3 Buckets

    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              MaxAge: 3000

    #    Others

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
